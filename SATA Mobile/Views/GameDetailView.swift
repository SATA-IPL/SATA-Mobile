import SwiftUI
import AVKit
import GoogleGenerativeAI

struct GameDetailView: View {
    let game: Game
    let gameId: Int
    @StateObject private var viewModel = GameDetailViewModel()
    var animation: Namespace.ID
    @State private var showStadium = false
    @State private var showVideoPlayer = false
    
    //Gemini
    static let config = GenerationConfig(
        temperature: 1,
        topP: 0.95,
        topK: 40,
        maxOutputTokens: 8192,
        responseMIMEType: "text/plain"
    )
    
    let model = GenerativeModel(
        name: "gemini-2.0-flash-exp",
        apiKey: APIKey.default,
        generationConfig: Self.config
    )
    @State var userPrompt = ""
    @State var response: LocalizedStringKey = "How can I help you today?"
    @State var isLoading = false
    @State private var isTextExpanded = false
    @State private var showChat = false
    @State private var messageText = ""
    @State private var isListening = false
    @State private var animationScale: CGFloat = 1.0
    
    func generateResponse(){
        isLoading = true;
        response = ""
        
        Task {
            do {
                let result = try await model.generateContent(userPrompt)
                isLoading = false
                response = LocalizedStringKey(result.text ?? "No response found")
                userPrompt = ""
            } catch {
                response = "Something went wrong! \n\(error.localizedDescription)"
            }
        }
    }
    
    var body: some View {
        NavigationStack {
            ScrollView {
                VStack(spacing: 20) {
                    // Reuse existing game data immediately
                    HStack(spacing: 0) {
                        TeamView(team: game.homeTeam, score: game.homeScore)
                        Image(systemName: "star.fill")
                            .opacity(game.homeScore > game.awayScore ? 1 : 0)
                            .frame(maxWidth: .infinity)
                        Spacer()
                        HStack {
                            VStack {
                                Text(game.hour)
                                    .font(.system(.title2, weight: .bold).width(.compressed))
                                let formattedDate = game.date.components(separatedBy: "-").reversed().joined(separator: "/")
                                Text(formattedDate)
                                    .font(.system(.headline, weight: .bold).width(.compressed))
                                    .foregroundStyle(.secondary)
                            }
                        }
                        .frame(maxWidth: .infinity)
                        Image(systemName: "star.fill")
                            .opacity(game.awayScore > game.homeScore ? 1 : 0)
                            .frame(maxWidth: .infinity)
                        TeamView(team: game.awayTeam, score: game.awayScore)
                    }
                    .padding(.horizontal, 35)
                    
                    if(game.state == "Live" || game.state == "Finished"){
                        PillButton(
                            action: {
                                showVideoPlayer.toggle()
                            },
                            title: "Watch on SATA+",
                            icon: "play.circle.fill"
                        )
                    }
                    
                    //Game Description Generated by Gemini
                    VStack(alignment: .leading) {
                        HStack {
                            Text("Description")
                                .font(.title3)
                                .fontWeight(.bold)
                            Spacer()
                            Label("AI Generated", systemImage: "sparkles")
                                .foregroundStyle(.secondary)
                        }
                        .padding(.horizontal)
                        
                        ZStack {
                            if isLoading {
                                VStack(alignment: .leading, spacing: 8) {
                                    ForEach(0..<3) { _ in
                                        ShimmerLoadingView()
                                            .frame(height: 16)
                                            .cornerRadius(8)
                                    }
                                    ShimmerLoadingView()
                                        .frame(width: UIScreen.main.bounds.width * 0.6, height: 16)
                                        .cornerRadius(8)
                                }
                                .padding()
                                .frame(maxWidth: .infinity)
                                .background(.thinMaterial)
                                .cornerRadius(10)
                            } else {
                                Text(response)
                                    .font(.body)
                                    .padding()
                                    .frame(maxWidth: .infinity)
                                    .background(.thinMaterial)
                                    .cornerRadius(10)
                                    .lineLimit(isTextExpanded ? nil : 4)
                                    .overlay(alignment: .bottomTrailing) {
                                        if !isTextExpanded {
                                            Text("...")
                                                .font(.body)
                                                .padding(.trailing, 20)
                                                .padding(.bottom, 8)
                                        }
                                    }
                                    .onTapGesture {
                                        withAnimation {
                                            isTextExpanded.toggle()
                                        }
                                    }
                            }
                        }
                        .frame(maxWidth: .infinity)
                        .padding(.horizontal)
                    }
                    .onAppear {
                        userPrompt = "Write a brief, engaging historical highlight about past matches between \(game.homeTeam.name) and \(game.awayTeam.name) with interesting facts for a description card. Just include response text. No Title"
                        generateResponse()
                    }
                    
                    // Show loading state only for additional details
                    switch viewModel.state {
                    case .loading:
                        loadingAdditionalInfo
                    case .error(let message):
                        ContentUnavailableView {
                            Label("Unable to Load Details", systemImage: "exclamationmark.triangle")
                        } description: {
                            Text(message)
                        } actions: {
                            Button("Try Again") {
                                Task { await viewModel.fetchGameDetail(id: gameId) }
                            }
                            .buttonStyle(.bordered)
                        }
                    case .loaded:
                        if let detailedGame = viewModel.game {
                            additionalGameInfo(detailedGame)
                        }
                    }
                }
            }
            .navigationTransition(.zoom(sourceID: game.id, in: animation))
            .background {
                gameBackground(
                    homeTeamColor: game.homeTeam.colors?[0] ?? "#FFFFFF",
                    awayTeamColor: game.awayTeam.colors?[0] ?? "#00C0FF"
                )
            }
        }
        .fullScreenCover(isPresented: $showVideoPlayer) {
            VideoPlayerView(videoURL: URL(string: game.videoUrl!)!, title: "Title", subtitle: "Subtitle")
            .presentationBackground(.clear)
            .ignoresSafeArea()
        }
        .navigationBarTitleDisplayMode(.inline)
        .task {
            await viewModel.fetchGameDetail(id: gameId)
            if let game = viewModel.game {
                print("Fetched game details:", game)
            }
        }
        .toolbar {
            ToolbarItemGroup(placement: .topBarTrailing) {
                Button(action: { showChat.toggle() }) {
                    Image(systemName: "bubble.left.and.bubble.right")
                }
                Button(action: { showStadium.toggle() }) {
                    Image(systemName: "sportscourt")
                }
                .disabled(viewModel.game?.stadium == nil)
            }
        }
        .sheet(isPresented: $showStadium) {
            if let stadium = viewModel.game?.stadium {
                StadiumView(stadium: stadium)
            }
        }
        .fullScreenCover(isPresented: $showChat) {
            ChatView(game: game, model: model, isPresented: $showChat)
        }
    }
    
    private var loadingAdditionalInfo: some View {
        VStack(alignment: .leading, spacing: 16) {
            Text("Lineups")
                .font(.title3)
                .fontWeight(.bold)
                .padding(.horizontal)
            
            ForEach(0..<2) { _ in
                VStack(alignment: .leading, spacing: 10) {
                    ShimmerLoadingView()
                        .frame(width: 120, height: 20)
                        .padding(.horizontal)
                    
                    ScrollView(.horizontal, showsIndicators: false) {
                        LazyHStack(spacing: 15) {
                            ForEach(0..<5) { _ in
                                VStack {
                                    ShimmerLoadingView()
                                        .frame(width: 70, height: 70)
                                        .clipShape(Circle())
                                    ShimmerLoadingView()
                                        .frame(width: 60, height: 12)
                                }
                                .frame(width: 100)
                            }
                        }
                        .padding(.horizontal)
                    }
                }
            }
        }
    }
    
    private func additionalGameInfo(_ detailedGame: Game) -> some View {
        VStack(alignment: .leading, spacing: 16) {
            SoccerFieldView(homeTeam: detailedGame.homeTeam, awayTeam: detailedGame.awayTeam)
                .frame(height: 300)
                .padding(.horizontal)

            Text("Squads")
                .font(.title3)
                .fontWeight(.bold)
                .padding(.horizontal)
            
            if let players = detailedGame.homeTeam.players {
                TeamLineupView(team: detailedGame.homeTeam, players: players)
            }
            
            if let players = detailedGame.awayTeam.players {
                TeamLineupView(team: detailedGame.awayTeam, players: players)
            }
        }
    }
    
    private func gameBackground(homeTeamColor: String, awayTeamColor: String) -> some View {
        Group {
            Rectangle()
                .fill(.thinMaterial)
                .frame(maxWidth: .infinity, maxHeight: .infinity)
            LinearGradient(
                colors: [
                    Color(hex: homeTeamColor).opacity(0.7),
                    Color(hex: homeTeamColor).opacity(0.3),
                    Color(hex: awayTeamColor).opacity(0.3),
                    Color(hex: awayTeamColor).opacity(0.7)
                ],
                startPoint: .topLeading,
                endPoint: .bottomTrailing
            )
            .opacity(0.4)
            .blur(radius: 80)
            LinearGradient(
                gradient: Gradient(
                    stops: [
                        .init(color: .clear, location: 0),
                        .init(color: Color(.systemBackground), location: 0.6),
                        .init(color: Color(.systemBackground), location: 1)
                    ]
                ),
                startPoint: .top,
                endPoint: .bottom
            )
        }
        .ignoresSafeArea()
    }
}

struct TeamView: View {
    let team: Team
    let score: Int
    
    var body: some View {
        VStack(spacing:0) {
            Text("\(score)")
                .foregroundStyle(.primary)
                .font(.system(size: 75, weight: .black, design: .default).width(.compressed))
            if let imageUrl = team.image {
                AsyncImage(url: URL(string: imageUrl)) { image in
                    image.resizable()
                } placeholder: {
                    Color.gray.opacity(0.3)
                }
                .frame(width: 50, height: 50)
            }
            Text(team.name)
                .font(.system(.footnote, weight: .semibold).width(.condensed))
                .foregroundStyle(.secondary)
                .multilineTextAlignment(.center)
                .padding(.top,5)
        }
    }
}

struct TeamLineupView: View {
    let team: Team
    let players: [Player]
    
    var body: some View {
        VStack(alignment: .leading, spacing: 10) {
            Text(team.name)
                .font(.headline)
                .padding(.horizontal)
            
            ScrollView(.horizontal, showsIndicators: false) {
                LazyHStack(spacing: 15) {
                    ForEach(players) { player in
                        PlayerView(player: player, team: team)
                    }
                }
                .padding(.horizontal)
            }
        }
    }
}

struct PlayerView: View {
    let player: Player
    @State private var isSheetPresented = false
    
    let team: Team
    
    
    var body: some View {
        VStack {
            AsyncImage(url: URL(string: player.image)) { image in
                image.resizable().aspectRatio(contentMode: .fill)
            } placeholder: {
                Color.gray.opacity(0.3)
            }
            .frame(width: 70, height: 70)
            .clipShape(Circle())
            .onTapGesture {
                isSheetPresented.toggle()
            }
            
            Text(player.name)
                .font(.caption)
                .lineLimit(1)
            
            Text("#\(player.shirtNumber)")
                .font(.caption2)
                .foregroundColor(.secondary)
            
            Text(player.position)
                .font(.caption2)
                .foregroundColor(.secondary)
                .lineLimit(1)
        }
        .frame(width: 100)
        .sheet(isPresented: $isSheetPresented) {
            NavigationStack {
                PlayerDetailView(playerId: player.id, team: team)
            }
        }
    }
}

struct SoccerFieldView: View {
    let homeTeam: Team
    let awayTeam: Team
    
    private func calculatePosition(for position: String, index: Int, in size: CGSize, isHomeTeam: Bool) -> CGPoint {
        let basePositions: [(CGFloat, CGFloat)] = [
            (0.95, 0.5),     // GK
            (0.85, 0.25),    // LB
            (0.85, 0.4),     // LCB
            (0.85, 0.6),     // RCB
            (0.85, 0.75),    // RB
            (0.70, 0.35),    // LCM
            (0.70, 0.5),     // CM
            (0.70, 0.65),    // RCM
            (0.60, 0.2),     // LW - adjusted back from 0.40 to 0.52
            (0.58, 0.5),     // ST - adjusted back from 0.40 to 0.52
            (0.60, 0.8)      // RW - adjusted back from 0.40 to 0.52
        ]

        func mirrorPosition(_ pos: (CGFloat, CGFloat)) -> (CGFloat, CGFloat) {
            return (1.0 - pos.0, pos.1)
        }

        let position = basePositions[min(index, basePositions.count - 1)]
        let finalPosition = isHomeTeam ? position : mirrorPosition(position)
        
        // Ajusta a posição Y considerando a altura total do PlayerDot (círculo + texto)
        let dotTotalHeight: CGFloat = 40 // altura aproximada do PlayerDot (24 do círculo + 16 do texto e espaçamento)
        let yOffset = dotTotalHeight / 2
        return CGPoint(
            x: size.width * finalPosition.0,
            y: (size.height * finalPosition.1) - yOffset
        )
    }

    var body: some View {
        GeometryReader { geometry in
            let aspectRatio: CGFloat = 1.5 // Standard soccer field ratio
            let width = min(geometry.size.width, geometry.size.height * aspectRatio)
            let height = width / aspectRatio
            
            ZStack {
                // Field background
                Rectangle()
                    .fill(Color(hex: "#2E8B57"))
                    .overlay {
                        // Grass pattern
                        HStack(spacing: 0) {
                            ForEach(0..<30) { i in
                                Rectangle()
                                    .fill(Color(hex: "#228B22"))
                                    .frame(width: geometry.size.width / 30)
                                    .opacity(i % 2 == 0 ? 0.3 : 0)
                            }
                        }
                    }
                    .overlay {
                        SoccerFieldLines()
                    }
                
                // Home team formation (left)
                if let players = homeTeam.players?.prefix(11) {
                    ForEach(Array(players.enumerated()), id: \.element.id) { index, player in
                        PlayerDot(player: player, teamColor: Color(hex: homeTeam.colors?[0] ?? "#FFFFFF"), team: homeTeam)  // Add team parameter
                            .position(
                                calculatePosition(
                                    for: player.position,
                                    index: index,
                                    in: geometry.size,
                                    isHomeTeam: false  // Changed from true to false
                                )
                            )
                    }
                }
                
                // Away team formation (right)
                if let players = awayTeam.players?.prefix(11) {
                    ForEach(Array(players.enumerated()), id: \.element.id) { index, player in
                        PlayerDot(player: player, teamColor: Color(hex: awayTeam.colors?[0] ?? "#00C0FF"), team: awayTeam)  // Add team parameter
                            .position(
                                calculatePosition(
                                    for: player.position,
                                    index: index,
                                    in: geometry.size,
                                    isHomeTeam: true   // Changed from false to true
                                )
                            )
                    }
                }
            }
            .frame(width: width, height: height)
            .position(x: geometry.size.width / 2, y: geometry.size.height / 2)
            .clipShape(RoundedRectangle(cornerRadius: 12))
        }
    }
}

struct SoccerFieldLines: View {
    var body: some View {
        Canvas { context, size in
            let lineColor = Color.white
            
            // Outline
            context.stroke(
                Path { path in
                    path.addRect(CGRect(origin: .zero, size: size))
                },
                with: .color(lineColor),
                lineWidth: 2
            )
            
            // Center line
            context.stroke(
                Path { path in
                    path.move(to: CGPoint(x: size.width/2, y: 0))
                    path.addLine(to: CGPoint(x: size.width/2, y: size.height))
                },
                with: .color(lineColor),
                lineWidth: 2
            )
            
            // Center circle
            context.stroke(
                Circle().path(in: CGRect(x: size.width/2 - size.height/6,
                                       y: size.height/2 - size.height/6,
                                       width: size.height/3,
                                       height: size.height/3)),
                with: .color(lineColor),
                lineWidth: 2
            )
            
            // Center dot
            context.fill(
                Circle().path(in: CGRect(x: size.width/2 - 4,
                                       y: size.height/2 - 4,
                                       width: 8,
                                       height: 8)),
                with: .color(lineColor)
            )
            
            let penaltyAreaWidth = size.width * 0.16
            let penaltyAreaHeight = size.height * 0.4
            
            // Corner arcs
            let cornerRadius: CGFloat = size.height * 0.04
            for (x, y) in [(0, 0), (size.width, 0), (0, size.height), (size.width, size.height)] {
                context.stroke(
                    Path { path in
                        path.addArc(
                            center: CGPoint(x: x, y: y),
                            radius: cornerRadius,
                            startAngle: Angle(degrees: x == 0 ? (y == 0 ? 0 : -90) : (y == 0 ? 90 : 180)),
                            endAngle: Angle(degrees: x == 0 ? (y == 0 ? 90 : 0) : (y == 0 ? 180 : 270)),
                            clockwise: false
                        )
                    },
                    with: .color(lineColor),
                    lineWidth: 2
                )
            }
            
            // Penalty areas
            for isLeft in [true, false] {
                let x = isLeft ? 0 : size.width - penaltyAreaWidth
                let penaltyAreaY = (size.height - penaltyAreaHeight) / 2
                
                // Main penalty box
                context.stroke(
                    Path { path in
                        path.addRect(CGRect(x: x,
                                          y: penaltyAreaY,
                                          width: penaltyAreaWidth,
                                          height: penaltyAreaHeight))
                    },
                    with: .color(lineColor),
                    lineWidth: 2
                )
                
                // Goal box - smaller proportions
                let goalBoxWidth = penaltyAreaWidth * 0.35
                let goalBoxHeight = penaltyAreaHeight * 0.4
                let goalBoxX = isLeft ? 0 : size.width - goalBoxWidth
                let goalBoxY = (size.height - goalBoxHeight) / 2
                context.stroke(
                    Path { path in
                        path.addRect(CGRect(x: goalBoxX,
                                          y: goalBoxY,
                                          width: goalBoxWidth,
                                          height: goalBoxHeight))
                    },
                    with: .color(lineColor),
                    lineWidth: 2
                )
                
                // Penalty spot at correct FIFA distance
                let penaltySpotX = isLeft ? (penaltyAreaWidth * 0.75) : (size.width - penaltyAreaWidth * 0.75)
                let penaltySpotY = size.height * 0.5
                
                // Arc that matches FIFA specifications
                let arcRadius = penaltyAreaWidth * 0.5  // Radius based on box width instead of height
                
                if isLeft {
                    // Left penalty arc - exactly touching penalty box
                    context.stroke(
                        Path { path in
                            path.addArc(
                                center: CGPoint(x: penaltySpotX, y: penaltySpotY),
                                radius: arcRadius,
                                startAngle: Angle(degrees: -50),
                                endAngle: Angle(degrees: 50),
                                clockwise: false
                            )
                        },
                        with: .color(lineColor),
                        lineWidth: 2
                    )
                } else {
                    // Right penalty arc - exactly touching penalty box
                    context.stroke(
                        Path { path in
                            path.addArc(
                                center: CGPoint(x: penaltySpotX, y: penaltySpotY),
                                radius: arcRadius,
                                startAngle: Angle(degrees: 130),
                                endAngle: Angle(degrees: 230),
                                clockwise: false
                            )
                        },
                        with: .color(lineColor),
                        lineWidth: 2
                    )
                }
                
                // Penalty spot
                context.fill(
                    Circle().path(in: CGRect(
                        x: penaltySpotX - 3,
                        y: penaltySpotY - 3,
                        width: 6,
                        height: 6
                    )),
                    with: .color(lineColor)
                )
            }
        }
    }
}

struct PlayerDot: View {
    let player: Player
    let teamColor: Color
    let team: Team
    @State private var isSheetPresented = false
    
    private func textColor(for backgroundColor: Color) -> Color {
        // Convert team color to RGB components
        let uiColor = UIColor(backgroundColor)
        var red: CGFloat = 0
        var green: CGFloat = 0
        var blue: CGFloat = 0
        var alpha: CGFloat = 0
        
        uiColor.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        
        // Calculate luminance using standard formula
        let luminance = 0.299 * red + 0.587 * green + 0.114 * blue
        
        // Return white for dark colors, black for light colors
        return luminance > 0.5 ? .black : .white
    }
    
    var body: some View {
        VStack(spacing: 1) {
            Circle()
                .fill(teamColor)
                .frame(width: 24, height: 24)
                .overlay {
                    Text(player.shirtNumber)
                        .font(.system(size: 12, weight: .bold))
                        .foregroundColor(textColor(for: teamColor))
                }
                .onTapGesture {
                    isSheetPresented.toggle()
                }
            
            Text(player.name.split(separator: " ").last ?? "")
                .font(.system(size: 8, weight: .medium))
                .foregroundColor(.white)
                .padding(.horizontal, 4)
                .background {
                    Capsule()
                        .fill(Color.black.opacity(0.6))
                }
        }
        .sheet(isPresented: $isSheetPresented) {
            NavigationStack {
                PlayerDetailView(playerId: player.id, team: team)
            }
        }
    }
}


