import SwiftUI
import AVKit
import GoogleGenerativeAI

struct GameDetailView: View {
    let game: Game
    let gameId: Int
    @StateObject private var viewModel = GameDetailViewModel()
    var animation: Namespace.ID
    @State private var showStadium = false
    @State private var showVideoPlayer = false
    
    //Gemini
    static let config = GenerationConfig(
        temperature: 1,
        topP: 0.95,
        topK: 40,
        maxOutputTokens: 8192,
        responseMIMEType: "text/plain"
    )
    
    let model = GenerativeModel(
        name: "gemini-2.0-flash-exp",
        apiKey: APIKey.default,
        generationConfig: Self.config
    )
    @State var userPrompt = ""
    @State var response: LocalizedStringKey = "How can I help you today?"
    @State var isLoading = false
    @State private var isTextExpanded = false
    @State private var showChat = false
    @State private var messageText = ""
    @State private var isListening = false
    @State private var animationScale: CGFloat = 1.0
    
    func generateResponse(){
        isLoading = true;
        response = ""
        
        Task {
            do {
                let result = try await model.generateContent(userPrompt)
                isLoading = false
                response = LocalizedStringKey(result.text ?? "No response found")
                userPrompt = ""
            } catch {
                response = "Something went wrong! \n\(error.localizedDescription)"
            }
        }
    }
    
    var body: some View {
        NavigationStack {
            ScrollView {
                VStack(spacing: 20) {
                    // Reuse existing game data immediately
                    HStack(spacing: 0) {
                        TeamView(team: game.homeTeam, score: game.homeScore)
                        Image(systemName: "star.fill")
                            .opacity(game.homeScore > game.awayScore ? 1 : 0)
                            .frame(maxWidth: .infinity)
                        Spacer()
                        HStack {
                            VStack {
                                Text(game.hour)
                                    .font(.system(.title2, weight: .bold).width(.compressed))
                                let formattedDate = game.date.components(separatedBy: "-").reversed().joined(separator: "/")
                                Text(formattedDate)
                                    .font(.system(.headline, weight: .bold).width(.compressed))
                                    .foregroundStyle(.secondary)
                            }
                        }
                        .frame(maxWidth: .infinity)
                        Image(systemName: "star.fill")
                            .opacity(game.awayScore > game.homeScore ? 1 : 0)
                            .frame(maxWidth: .infinity)
                        TeamView(team: game.awayTeam, score: game.awayScore)
                    }
                    .padding(.horizontal, 35)
                    
                    if(game.state == "Live" || game.state == "Finished"){
                        PillButton(
                            action: {
                                showVideoPlayer.toggle()
                            },
                            title: "Watch on SATA+",
                            icon: "play.circle.fill"
                        )
                    }
                    
                    //Game Description Generated by Gemini
                    VStack(alignment: .leading) {
                        HStack {
                            Text("Description")
                                .font(.title3)
                                .fontWeight(.bold)
                            Spacer()
                            Label("AI Generated", systemImage: "sparkles")
                                .foregroundStyle(.secondary)
                        }
                        .padding(.horizontal)
                        
                        ZStack {
                            if isLoading {
                                VStack(alignment: .leading, spacing: 8) {
                                    ForEach(0..<3) { _ in
                                        ShimmerLoadingView()
                                            .frame(height: 16)
                                            .cornerRadius(8)
                                    }
                                    ShimmerLoadingView()
                                        .frame(width: UIScreen.main.bounds.width * 0.6, height: 16)
                                        .cornerRadius(8)
                                }
                                .padding()
                                .frame(maxWidth: .infinity)
                                .background(.thinMaterial)
                                .cornerRadius(10)
                            } else {
                                Text(response)
                                    .font(.body)
                                    .padding()
                                    .frame(maxWidth: .infinity)
                                    .background(.thinMaterial)
                                    .cornerRadius(10)
                                    .lineLimit(isTextExpanded ? nil : 4)
                                    .overlay(alignment: .bottomTrailing) {
                                        if !isTextExpanded {
                                            Text("...")
                                                .font(.body)
                                                .padding(.trailing, 20)
                                                .padding(.bottom, 8)
                                        }
                                    }
                                    .onTapGesture {
                                        withAnimation {
                                            isTextExpanded.toggle()
                                        }
                                    }
                            }
                        }
                        .frame(maxWidth: .infinity)
                        .padding(.horizontal)
                    }
                    .onAppear {
                        userPrompt = "Write a brief, engaging historical highlight about past matches between \(game.homeTeam.name) and \(game.awayTeam.name) with interesting facts for a description card. Just include response text. No Title"
                        generateResponse()
                    }
                    
                    // Show loading state only for additional details
                    switch viewModel.state {
                    case .loading:
                        loadingAdditionalInfo
                    case .error(let message):
                        ContentUnavailableView {
                            Label("Unable to Load Details", systemImage: "exclamationmark.triangle")
                        } description: {
                            Text(message)
                        } actions: {
                            Button("Try Again") {
                                Task { await viewModel.fetchGameDetail(id: gameId) }
                            }
                            .buttonStyle(.bordered)
                        }
                    case .loaded:
                        if let detailedGame = viewModel.game {
                            additionalGameInfo(detailedGame)
                        }
                    }
                }
            }
            .navigationTransition(.zoom(sourceID: game.id, in: animation))
            .background {
                gameBackground(
                    homeTeamColor: game.homeTeam.colors?[0] ?? "#FFFFFF",
                    awayTeamColor: game.awayTeam.colors?[0] ?? "#00C0FF"
                )
            }
        }
        .fullScreenCover(isPresented: $showVideoPlayer) {
            VideoPlayerView(videoURL: URL(string: game.videoUrl!)!, title: "Title", subtitle: "Subtitle")
            .presentationBackground(.clear)
            .ignoresSafeArea()
        }
        .navigationBarTitleDisplayMode(.inline)
        .task {
            await viewModel.fetchGameDetail(id: gameId)
            if let game = viewModel.game {
                print("Fetched game details:", game)
            }
        }
        .toolbar {
            ToolbarItemGroup(placement: .topBarTrailing) {
                Button(action: { showChat.toggle() }) {
                    Image(systemName: "bubble.left.and.bubble.right")
                }
                Button(action: { showStadium.toggle() }) {
                    Image(systemName: "sportscourt")
                }
                .disabled(viewModel.game?.stadium == nil)
            }
        }
        .sheet(isPresented: $showStadium) {
            if let stadium = viewModel.game?.stadium {
                StadiumView(stadium: stadium)
            }
        }
        .fullScreenCover(isPresented: $showChat) {
            ChatView(game: game, model: model, isPresented: $showChat)
        }
    }
    
    private var loadingAdditionalInfo: some View {
        VStack(alignment: .leading, spacing: 16) {
            Text("Lineups")
                .font(.title3)
                .fontWeight(.bold)
                .padding(.horizontal)
            
            ForEach(0..<2) { _ in
                VStack(alignment: .leading, spacing: 10) {
                    ShimmerLoadingView()
                        .frame(width: 120, height: 20)
                        .padding(.horizontal)
                    
                    ScrollView(.horizontal, showsIndicators: false) {
                        LazyHStack(spacing: 15) {
                            ForEach(0..<5) { _ in
                                VStack {
                                    ShimmerLoadingView()
                                        .frame(width: 70, height: 70)
                                        .clipShape(Circle())
                                    ShimmerLoadingView()
                                        .frame(width: 60, height: 12)
                                }
                                .frame(width: 100)
                            }
                        }
                        .padding(.horizontal)
                    }
                }
            }
        }
    }
    
    private func additionalGameInfo(_ detailedGame: Game) -> some View {
        VStack(alignment: .leading, spacing: 16) {
            Text("Lineups")
                .font(.title3)
                .fontWeight(.bold)
                .padding(.horizontal)
            
            if let players = detailedGame.homeTeam.players {
                TeamLineupView(team: detailedGame.homeTeam, players: players)
            }
            
            if let players = detailedGame.awayTeam.players {
                TeamLineupView(team: detailedGame.awayTeam, players: players)
            }
        }
    }
    
    private func gameBackground(homeTeamColor: String, awayTeamColor: String) -> some View {
        Group {
            Rectangle()
                .fill(.thinMaterial)
                .frame(maxWidth: .infinity, maxHeight: .infinity)
            LinearGradient(
                colors: [
                    Color(hex: homeTeamColor).opacity(0.7),
                    Color(hex: homeTeamColor).opacity(0.3),
                    Color(hex: awayTeamColor).opacity(0.3),
                    Color(hex: awayTeamColor).opacity(0.7)
                ],
                startPoint: .topLeading,
                endPoint: .bottomTrailing
            )
            .opacity(0.4)
            .blur(radius: 80)
            LinearGradient(
                gradient: Gradient(
                    stops: [
                        .init(color: .clear, location: 0),
                        .init(color: Color(.systemBackground), location: 0.6),
                        .init(color: Color(.systemBackground), location: 1)
                    ]
                ),
                startPoint: .top,
                endPoint: .bottom
            )
        }
        .ignoresSafeArea()
    }
}

struct TeamView: View {
    let team: Team
    let score: Int
    
    var body: some View {
        VStack(spacing:0) {
            Text("\(score)")
                .foregroundStyle(.primary)
                .font(.system(size: 75, weight: .black, design: .default).width(.compressed))
            if let imageUrl = team.image {
                AsyncImage(url: URL(string: imageUrl)) { image in
                    image.resizable()
                } placeholder: {
                    Color.gray.opacity(0.3)
                }
                .frame(width: 50, height: 50)
            }
            Text(team.name)
                .font(.system(.footnote, weight: .semibold).width(.condensed))
                .foregroundStyle(.secondary)
                .multilineTextAlignment(.center)
                .padding(.top,5)
        }
    }
}

struct TeamLineupView: View {
    let team: Team
    let players: [Player]
    
    var body: some View {
        VStack(alignment: .leading, spacing: 10) {
            Text(team.name)
                .font(.headline)
                .padding(.horizontal)
            
            ScrollView(.horizontal, showsIndicators: false) {
                LazyHStack(spacing: 15) {
                    ForEach(players) { player in
                        PlayerView(player: player, team: team)
                    }
                }
                .padding(.horizontal)
            }
        }
    }
}

struct PlayerView: View {
    let player: Player
    @State private var isSheetPresented = false
    
    let team: Team
    
    
    var body: some View {
        VStack {
            AsyncImage(url: URL(string: player.image)) { image in
                image.resizable().aspectRatio(contentMode: .fill)
            } placeholder: {
                Color.gray.opacity(0.3)
            }
            .frame(width: 70, height: 70)
            .clipShape(Circle())
            .onTapGesture {
                isSheetPresented.toggle()
            }
            
            Text(player.name)
                .font(.caption)
                .lineLimit(1)
            
            Text("#\(player.shirtNumber)")
                .font(.caption2)
                .foregroundColor(.secondary)
            
            Text(player.position)
                .font(.caption2)
                .foregroundColor(.secondary)
                .lineLimit(1)
        }
        .frame(width: 100)
        .sheet(isPresented: $isSheetPresented) {
            NavigationStack {
                PlayerDetailView(playerId: player.id, team: team)
            }
        }
    }
}
